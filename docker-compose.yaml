services:
  avito-shop-service:
      build: .
      container_name: avito-shop-service
      ports:
        - "8080:8080"
      environment:
        # енвы подключения к БД
        - DATABASE_PORT=5432
        - DATABASE_USER=postgres
        - DATABASE_PASSWORD=password
        - DATABASE_NAME=shop
        - DATABASE_HOST=db
        # порт сервиса
        - SERVER_PORT=8080
        # секретный ключ JWT
        - JWT_SECRET=my_secret_key
      depends_on:
        pgbouncer:
            condition: service_healthy
      networks:
        - internal
  
  db:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: shop
      POSTGRES_MAX_CONNECTIONS: "200"
    volumes:
      - ./migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5431:5432"
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d shop'"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - internal

  pgbouncer:
    image: edoburu/pgbouncer
    container_name: pgbouncer
    ports:
      - "5432:5432"
    environment:
      - DB_HOST=db
      - DB_PORT=5431
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=shop
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=2000
      - DEFAULT_POOL_SIZE=200
      - RESERVE_POOL_SIZE=50
      - RESERVE_POOL_TIMEOUT=5
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h pgbouncer -p 5432 -d shop"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - internal

  
  db-test:
    image: postgres:13
    container_name: postgres-test
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: shop
    volumes:
      - ./migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5050:5432"
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d shop'"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - internal
networks:
  internal: